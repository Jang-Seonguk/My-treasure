자료구조 중 하나인 스택 (Stack)

스택 (Stack) 구조
  1. 데이터를 제한적으로 접근할 수 있는 구조 (한쪽 끝에서만 접근할 수 있는 구조
  2. 가장 나중에 쌓은 데이터를 가장 먼저 빼낼 수 있는 데이터구조 (LIFO, Last In First Out)
  3. 컴퓨터 내부의 프로레스 구조의 함수 동작 방식에 활용됨
  4. push() - 데이터를 스택에 넣기 , pop() - 데이터를 스택에서 꺼내기

파이썬 코드로 스택 (Stack) 기능을 하는 함수 구현해보기

def recursive(data)
  if data < 0:
    print("ended")
  else:
    print(data)
    recursive(data - 1)    # 재귀함수
    print("returned", data)
-----------------------------------------------------------------------------------

스택 (Stack)의 장단점

  장점
   1. 구조가 단순해서, 구현이 쉽다
   2. 데이터 저장/읽기 속도가 빠르다
  
  단점
   1. 데이터 최대 갯수를 미리 정해야 한다. (파이썬의 경우는 최대 1000번 까지만 호출이 가능함
   2. 저장 공간의 낭비가 발생할 수 있음
 
스택 (Stack)은 단순하고 빠른 성능을 위해 사용되므로, 보통 배열 구조를 활용해서 구현하는 것이 일방적임. 
이 경우, 위에서 열거한 단점이 있을 수 있음
 

파이썬 리스트 기능에서 제공하는 메서드로 스택 (Stack) 사용해보기

data_stack = list()

data_stack.append(1)
data_stack.append(2)
data_stack.pop()   # 가장 마지막에 들어간 데이터가 삭제됨 (LIFO)
--------------------------------------------------------------------

리스트 변수로 스택 (Stack)을 다루는 pop, push 기능 구현해보기 (pop, push 함수 사용하지 않고 직접 구현)

stack_list = list()

def push(data):
  stack_list.append(data)
  
def pop():
  data = stack_list[-1]
  del stack_list[-1]
  return data

 
 




# include <stdio.h>
# include <stdlib.h>

# define TRUE 1
# define FALSE 0
# define MAX_VERTICES 100
# define INF 1000L

typedef struct GraphType
{
	int n;
	int weight[MAX_VERTICES][MAX_VERTICES];
}GraphType;

int visited[MAX_VERTICES];
int distance[MAX_VERTICES];

int shortest_vertex(int n)
{
	int v, i;
	for (i = 0; i < n; i++)
	{
		if (!visited[i])
		{
			v = i;
			break;
		}
	}
	for (i = 0; i < n; i++)
	{
		if (!visited[i] && (distance[i] < distance[v]))
		{
			v = i;
		}
	}
	return v;
}

int all_vertex_visited(int n)
{
	int i;
	for (i = 0; i < n; i++)
	{
		if (!visited[i])
		{
			return FALSE;
		}
	}
	return TRUE;
}


void prim(GraphType* g, int s)
{
	int i, v, u, sum = 0;

	for (u = 0; u < g->n; u++)
	{
		distance[u] = INF;
		visited[u] = FALSE;
	}
	distance[s] = 0;

	while (!all_vertex_visited(g->n))
	{
		u = shortest_vertex(g->n);
		visited[u] = TRUE;

		if (distance[u] == INF)
		{
			return;
		}

		printf("정점 %d 추가 /  거리 : %d\n", u + 1, distance[u]);
		sum += distance[u];
		for (v = 0; v < g->n; v++)
		{
			if (g->weight[u][v] != INF)
			{
				if (!visited[v] && g->weight[u][v] < distance[v])
				{
					distance[v] = g->weight[u][v];
				}
			}
		}
	}
	printf("\nCost is : %d\n", sum);
	
}




int main()
{

	GraphType g = { 8,
		{{0,2,8,INF,INF,INF,INF,INF},
		{2,0,7,9,INF,INF,INF,INF},
		{8,7,0,4,10,12,INF,INF},
		{INF,9,4,0,INF,INF,INF,INF},
		{INF,INF,10,INF,0,6,14,INF},
		{INF,INF,12,INF,6,0,INF,INF},
		{INF,INF,INF,INF,14,INF,0,3},
		{INF,INF,INF,INF,INF,INF,3,0}}
	};

	prim(&g, 0);
	return 0;
	
}

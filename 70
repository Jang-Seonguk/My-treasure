
#include<stdio.h>
#include<stdlib.h>

#define MAX_LIST_SIZE 100 // 배열의  최대 사이즈 선언

typedef int element;  //리스트의 요소 선언 
typedef struct
{
    int list[MAX_LIST_SIZE]; //배열 정의
    int length;                 //현재 배열에 저장된 자료들의 길이
}ArrayListType;

void error(char* message)    // 오류 처리 함수
{
    fprintf(stderr, "%s \n", message);
    exit(1);
}

void init(ArrayListType* L) //리스트 초기화 함수.
{
    L->length = 0;
}

// list가 비어있으면 1을 반환.
//그렇치 않으면 0을 반환. 
int is_empty(ArrayListType* L)
{
    return L->length == MAX_LIST_SIZE;
}

//list가 가득 차있으면 1을 반환
//그렇치 않으면 0을 반환
int is_full(ArrayListType* L) {
    return L->length == MAX_LIST_SIZE;
}
//list출력 함수.
void display(ArrayListType* L)
{
    int i;
    for (i = 0; i < L->length; i++)
        printf("%d \n", L->list[i]);
}

//position : 삽입하고자 하는 위치
//item : 삽입하고자 하는 자료
void add(ArrayListType* L, int position, element item)
{
    if (!is_full(L) && (position >= 0) && (position <= L->length))
    {
        int i;
        for (i = (L->length - 1); i >= position; i--)
            L->list[i + 1] = L->list[i];
        L->list[position] = item;
        L->length++;
    }
}
//position : 삭제하고자 하는 위치
//반환값 : 삭제되는 자료
element _delete_(ArrayListType* L, int position)
{
    int i;
    element item;
    if (position < 0 || position >= L->length)
        error("위치오류");
    item = L->list[position];
    for (i = position; i < (L->length - 1); i++)
        L->list[i] = L->list[i + 1];
    L->length--;
    return item;
}

//position의 위치의 요소를 item으로 대채
void replace(ArrayListType* L, int position, element item)
{
    if (is_empty(L) == 1)
        printf("비어있습니다.");
    else if (position < 0 || position >= L->length)
        printf("위치오류");

    L->list[position] = item;
}

//현재 리스트의 길이를 구해서 출력.
void get_length(ArrayListType* L)
{
    int len;
    len = L->length;
    printf("리스트의 길이는 %d 입니다. \n", len);
}

//init와 같은 리스트 초기화 함수.
void clear(ArrayListType* L)
{
    L->length = 0;
}

int main()
{
    ArrayListType list1;
    ArrayListType* plist;
    //ArrayListType의 구조체를 정적으로 생성하고 이 구조체를 가리키는
    // 포인터를 함수의 매개변수로 전달.
    init(&list1);
    add(&list1, 0, 10);
    add(&list1, 0, 20);
    add(&list1, 0, 30);
    display(&list1);
    get_length(&list1);

    //ArrayListType의 구조체를 동적으로 생성하고 이 구조체를 가리키는
    // 포인터를 함수의 매개변수로 전달.
    plist = (ArrayListType*)malloc(sizeof(ArrayListType));
    init(plist);
    add(plist, 0, 10);
    add(plist, 0, 20);
    add(plist, 0, 30);

    is_empty(plist);
    get_length(plist);
    add(plist, 0, 40);
    add(plist, 0, 50);
    add(plist, 0, 60);
    get_length(plist);

    clear(plist);

    free(plist);

    return 0;
}

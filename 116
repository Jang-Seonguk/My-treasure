그래프 (Graph)를 이용한 BFS, DFS

# include <stdio.h>
# include <stdlib.h>

# define TRUE 1
# define FALSE 0
# define MAX_VERTICES 50

typedef struct GraphType
{
	int n;
	int adj_mat[MAX_VERTICES][MAX_VERTICES];
}GraphType;

int visited[MAX_VERTICES];
int visited_B[MAX_VERTICES];


typedef struct __node
{
	int data;
	struct __node* next;
} node;

typedef struct Queue
{
	node* front;
	node* rear;
	int count;
}Queue;

void InitQueue(Queue* queue)
{
	queue->front = NULL;
	queue->rear = NULL;
	queue->count = 0;
}

int QIsEmpty(Queue* queue)
{
	return queue->count == 0;
}

void Enqueue(Queue* queue, int data)
{
	node* now = (node*)malloc(sizeof(node));
	now->data = data;
	now->next = NULL;

	if (QIsEmpty(queue))
	{
		queue->front = now;
	}
	else
	{
		queue->rear->next = now;
	}
	queue->rear = now;
	queue->count++;
}

int Dequeue(Queue* queue)
{
	int re = 0;
	node* now;
	if (QIsEmpty(queue))
	{
		return re;
	}
	now = queue->front;
	re = now->data;
	queue->front = now->next;
	free(now);
	queue->count--;
	return re;
}

void DFS(GraphType* g, int v)
{
	int w;
	visited[v] = TRUE;
	printf("정점 %d -> ", v);
	for (w = 0; w < g->n; w++)
	{
		if (g->adj_mat[v][w] && !visited[w])
		{
			DFS(g, w);
		}
	}
}

void BFS(GraphType* g, int v)
{
	int w;
	Queue* q = (Queue*)malloc(sizeof(Queue));

	InitQueue(q);
	visited_B[v] = TRUE;
	printf("%d 방문 -> ", v);
	Enqueue(q, v);

	while (!QIsEmpty(q))
	{
		v = Dequeue(q);
		for (w = 0; w < g->n; w++)
		{
			if (g->adj_mat[v][w] && !visited_B[w])
			{
				visited_B[w] = TRUE;
				printf("%d 방문 -> ", w);
				Enqueue(q, w);
			}
		}
	}

}


void init(GraphType* g)
{
	int r, c;
	g->n = 0;
	for (r = 0; r < MAX_VERTICES; r++)
	{
		for (c = 0; c < MAX_VERTICES; c++)
		{
			g->adj_mat[r][c] = 0;
		}
	}
}

void insert_vertex(GraphType* g, int v)
{
	if (((g->n) + 1) > MAX_VERTICES)
	{
		fprintf(stderr, "그래프 : 정점의 개수 초과");
		return;
	}
	g->n++;
}

void insert_edge(GraphType* g, int start, int end)
{
	if (start >= g->n || end >= g->n)
	{
		fprintf(stderr, "그래프 : 정점 번호 오류");
		return;
	}
	g->adj_mat[start][end] = 1;
	g->adj_mat[end][start] = 1;
}


int main(void)
{
	int tmp = 0;
	int i, j;
	GraphType* g;
	g = (GraphType*)malloc(sizeof(GraphType));
	init(g);
	
	for (i = 0; i < 10; i++)
	{
		insert_vertex(g, i);
	}
	
	insert_edge(g, 0, 1);
	insert_edge(g, 0, 3);
	insert_edge(g, 1, 2);
	insert_edge(g, 1, 4);
	insert_edge(g, 1, 5);
	insert_edge(g, 2, 4);
	insert_edge(g, 3, 5);
	insert_edge(g, 4, 6);
	insert_edge(g, 4, 7);
	insert_edge(g, 5, 6);
	insert_edge(g, 5, 7);
	insert_edge(g, 6, 8);
	insert_edge(g, 7, 8);
	insert_edge(g, 8, 9);
	
	printf("DFS 출력\n");
 	DFS(g, 0);
 	
 	printf("\n\n");
 	
	printf("BFS 출력\n");
 	BFS(g, 0);
 	
	
	
	return 0;
}

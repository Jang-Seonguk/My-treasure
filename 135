# include <stdio.h>
# include <stdlib.h>
# include <limits.h>

# define TRUE 1
# define FALSE 0
#define MAX_VALUE 100
# define INF 1000000    // 길이없는 것을 표시

typedef struct GraphType
{
	int n;
	int weight[MAX_VALUE][MAX_VALUE];
}GraphType;

int distance[MAX_VALUE];
int found[MAX_VALUE];


int choose(int distance[], int n, int found[])
{
	int i, min, minpos;
	min = INT_MAX;
	minpos = -1;
	for (i = 0; i < n; i++)
	{
		if (distance[i] < min && !found[i])
		{
			min = distance[i];
			minpos = i;
		}
	}
	return minpos;
}

void print_status(GraphType* g)
{
	int i;
	
	printf("\t  ");
	for (i = 0; i < g->n; i++)
	{
		printf("[%2d ] ", i+1);
	}
	
	printf("\ndistance : ");

	for (i = 0; i < g->n; i++)
	{
		if (distance[i] == INF)
		{
			printf(" *    ");
		}
		
		else
		{
			printf("%2d    ", distance[i]);
		}
	}
	printf("\n\n");
	printf(" found : ");
	for (i = 0; i < g->n; i++)
	{
		printf("%2d ", found[i]);
	}
	printf("\n\n");

}

void shortest_path(GraphType* g, int start)
{
	int i, u, w;


	for (i = 0; i < g->n; i++)
	{
		distance[i] = g->weight[start][i];
		found[i] = FALSE;
		
	}
	found[start] = TRUE;
	distance[start] = 0;
	
	for (i = 0; i < g->n - 1; i++)
	{
		print_status(g);
		u = choose(distance, g->n, found);
		found[u] = TRUE;
		
		for (w = 0; w < g->n; w++)
		{
			if (!found[w])
			{
				if (distance[u] + g->weight[u][w] < distance[w])
				{
					distance[w] = distance[u] + g->weight[u][w];
					
				}
			}
		}
	}
}

int main(void)
{
	GraphType g = { 7,
		{{0,6,2,16,INF,INF,14},
	{6,0,7,5,4,INF,INF},
	{2,7,0,INF,3,8,INF},
	{16,5,INF,0,4,INF,3},
	{INF,4,3,4,0,INF,10},
	{INF,INF,8,INF,INF,0,1},
	{14,INF,INF,3,10,1,0}}
	};
	shortest_path(&g, 0);
	return 0;
}

Minimum Spanning Tree(최소 신장 트리) - 크루수칼 2


#include <stdio.h> 

#define VERTEX 100 
#define MAX 100 
#define VERTICES 9

int parent[VERTEX];
int num[VERTEX];

typedef struct {
    int start, end, weight;
}Element;

typedef struct {
    Element heap[MAX];
    int heap_size;
}HeapType;

void InitHeap(HeapType* h)
{
    h->heap_size = 0;
}
void InsertHeap(HeapType* h, Element item)
{
    int i;
    i = ++(h->heap_size);

    while (i != 1 && item.weight < h->heap[i / 2].weight)
    {
        h->heap[i] = h->heap[i / 2];
        i /= 2;
    }

    h->heap[i] = item;
}

Element DeleteHeap(HeapType* h)
{
    int parent = 1, child = 2;
    Element data, temp;

    data = h->heap[parent];
    temp = h->heap[(h->heap_size)--];

    while (child <= h->heap_size)
    {
        //자식 노드간 작은 수 비교  
        if ((child < h->heap_size) && (h->heap[child].weight) > h->heap[child + 1].weight)
            child++;

        if (temp.weight <= h->heap[child].weight)
            break;

        h->heap[parent] = h->heap[child];
        parent = child;
        child *= 2; // 다음 자식 노드와 비교 
    }

    h->heap[parent] = temp;
    return data;
}

void InitUF(void)
{
    int i;
    for (i = 0; i < VERTEX; i++)
    {
        parent[i] = -1;
        num[i] = 1;
    }
}

int SetFind(int v)
{
    int i, p, temp;

    for (i = v; (p = parent[i]) >= 0; i = p);
    
    temp = i;


    for (i = v; (p = parent[i]) >= 0; i = p)
    {
        parent[i] = temp;    
    }

    return temp;
}

void SetUnion(int v1, int v2)
{
    if (num[v1] < num[v2])
    {
        parent[v1] = v2;
        num[v1] += num[v2];
    }
    else
    {
        parent[v2] = v1;
        num[v2] += num[v1];
    }
}

void InsertHeapEdge(HeapType* h, int v, int u, int weight)
{
    Element node;
    node.start = v;
    node.end = u;
    node.weight = weight;

    InsertHeap(h, node);
}

int kruskal(HeapType* h, int n)
{
    Element e;

    int uSet, vSet, edgeCount = 0, sum = 0;

    while (edgeCount < n - 1)
    {
        e = DeleteHeap(h);
        vSet = SetFind(e.start);
        uSet = SetFind(e.end);

        if (vSet != uSet)
        {
            printf("(%d,%d) %d\n", e.start, e.end, e.weight);
            sum += e.weight;
            edgeCount++;
            SetUnion(vSet, uSet);
        }

    }

    printf("\n크루수칼 최소 신장 길이 : %d", sum);


    return 0;
}



int main()
{

    HeapType h;
    int i, j;

    InitHeap(&h);
    InitUF();

    int graph[VERTICES][VERTICES] = { {0,0,0,0,0,0,0,0,0},
                                        {0,0,2,8,0,0,0,0,0},
                                        {0,2,0,7,9,0,0,0,0},
                                        {0,8,7,0,4,10,12,0,0},
                                        {0,0,9,4,0,0,0,0,0},
                                        {0,0,0,10,0,0,6,14,0},
                                        {0,0,0,12,0,6,0,0},
                                        {0,0,0,0,0,14,0,0,3},
                                        {0,0,0,0,0,0,0,3,0} };

    for (i = 0; i < VERTICES; i++)
    {
        for (j = 0; j < i; j++)
        {
            if (graph[i][j] != 0)
            {

                InsertHeapEdge(&h, i, j, graph[i][j]);
            }
        }
    }

    
    kruskal(&h, 8);

}

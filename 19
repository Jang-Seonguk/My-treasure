# include <stdio.h>
# include <stdlib.h>

int main(void)
{
	int* pi;
	pi = (int*)malloc(sizeof(int));
	if (pi == NULL)
	{ 
		printf("동적 메모리 할당에 실패했습니다.\n");
		exit(1);
	}
	*pi = 100;
	printf("%d\n", *pi);
	free(pi);
	return 0;
}
-------------------------------------------------------------------------------

# include <stdio.h>
# include <stdlib.h>

int main(void)
{
	char* pc = NULL;
	int i = 0;
	pc = (char*)malloc(100 * sizeof(char));
	if (pc == NULL)
	{
		printf("동적 메모리 할당에 실패했습니다.\n");
		exit(1);
	}
	for (i = 0; i < 26; i++)
	{
		*(pc + i) = 'a' + i;
	}
	*(pc + i) = 0;

	printf("%s\n", pc);
	free(pc);
	return 0;
}
-------------------------------------------------------------------------------

# include <stdio.h>
# include <stdlib.h>

int main(void)
{
	int* pi, i;
	pi = (int*)malloc(5 * sizeof(int));
	if (pi == NULL)
	{
		printf("동적 메모리 할당에 실패했습니다.\n");
		exit(1);
	}
	pi[0] = 100;
	pi[1] = 200;
	pi[2] = 300;
	pi[3] = 400;
	pi[4] = 500;
	for (i = 0; i < 5; i++)
	{
		printf("%d\n", *(pi + i));
	}
	free(pi);
	return 0;
}
-------------------------------------------------------------------------------

# include <stdio.h>
# include <stdlib.h>
# include <string.h>



struct Book
{
	int number;
	char title[100];
};

void showBook(struct Book* p, int n)
{
	int i;
	for (i = 0; i < n; i++)
	{
		printf("번호 %d : %s\n", (p + i)->number, (p + i)->title);
	}
}
int main(void)
{
	struct Book* p;
	p = (struct Book*)malloc(2 * sizeof(struct Book));
	if (p == NULL)
	{
		printf("동적 메모리 할당에 실패했습니다.\n");
		exit(1);
	}

	p->number = 1;
	strcpy(p->title, "C Programming");

	(p + 1)->number = 2;
	strcpy((p + 1)->title, "Data Structure");

	showBook(p, 2);
	free(p);
	return 0;
}
-------------------------------------------------------------------------------

# include <stdio.h>
# include <stdlib.h>

int main(void)
{
	int i, x, y;
	int** pptr = (int**)malloc(sizeof(int*) * 8);
	for (i = 0; i < 8; i++)
	{
		*(pptr + i) = (int*)malloc(sizeof(int) * 6);
	}

	for (y = 0; y < 8; y++)
	{
		for (x = 0; x < 6; x++)
		{
			*(*(pptr + y) + x) = 6 * y + x;
		}
	}

	for (y = 0; y < 8; y++)
	{
		for (x = 0; x < 6; x++)
		{
			printf("%3d", *(*(pptr + y) + x));
		}
		printf("\n");
	}

	for (y = 0; y < 8; y++)
	{
		free(*(pptr + y));
	}
	return 0;
}

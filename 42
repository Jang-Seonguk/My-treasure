첫 번째 문제 : 직사각형 별찍기

문제 설명

이 문제에는 표준 입력으로 두 개의 정수 n과 m이 주어집니다.
별(*) 문자를 이용해 가로의 길이가 n, 세로의 길이가 m인 직사각형 형태를 출력해보세요.

-----------------------------------------------------------------------------------------------------------------

n, m = map(int, input().strip().split(' '))
s = '*'
for i in range(m):
    print(s * n)
    

-----------------------------------------------------------------------------------------------------------------

두 번째 문제 : 예산

문제 설명
S사에서는 각 부서에 필요한 물품을 지원해 주기 위해 부서별로 물품을 구매하는데 필요한 금액을 조사했습니다. 
그러나, 전체 예산이 정해져 있기 때문에 모든 부서의 물품을 구매해 줄 수는 없습니다.
그래서 최대한 많은 부서의 물품을 구매해 줄 수 있도록 하려고 합니다.

물품을 구매해 줄 때는 각 부서가 신청한 금액만큼을 모두 지원해 줘야 합니다. 예를 들어 1,000원을 신청한 부서에는 정확히 1,000원을 지원해야 하며,
1,000원보다 적은 금액을 지원해 줄 수는 없습니다.

부서별로 신청한 금액이 들어있는 배열 d와 예산 budget이 매개변수로 주어질 때, 
최대 몇 개의 부서에 물품을 지원할 수 있는지 return 하도록 solution 함수를 완성해주세요.

제한사항
d는 부서별로 신청한 금액이 들어있는 배열이며, 길이(전체 부서의 개수)는 1 이상 100 이하입니다.
d의 각 원소는 부서별로 신청한 금액을 나타내며, 부서별 신청 금액은 1 이상 100,000 이하의 자연수입니다.
budget은 예산을 나타내며, 1 이상 10,000,000 이하의 자연수입니다.

-----------------------------------------------------------------------------------------------------------------

def solution(d, budget):
    d.sort()
    count =  0
    for i in d:
        if budget >= i:
            budget -= i
            count += 1
        else:
            break
    return count
    
-----------------------------------------------------------------------------------------------------------------

세 번째 문제 : 비밀지도

문제 설명

네오는 평소 프로도가 비상금을 숨겨놓는 장소를 알려줄 비밀지도를 손에 넣었다. 
그런데 이 비밀지도는 숫자로 암호화되어 있어 위치를 확인하기 위해서는 암호를 해독해야 한다. 다행히 지도 암호를 해독할 방법을 적어놓은 메모도 함께 발견했다.

지도는 한 변의 길이가 n인 정사각형 배열 형태로, 각 칸은 공백(" ) 또는벽(#") 두 종류로 이루어져 있다.
전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있다. 각각 지도 1과 지도 2라고 하자. 
지도 1 또는 지도 2 중 어느 하나라도 벽인 부분은 전체 지도에서도 벽이다. 지도 1과 지도 2에서 모두 공백인 부분은 전체 지도에서도 공백이다.
지도 1과 지도 2는 각각 정수 배열로 암호화되어 있다.
암호화된 배열은 지도의 각 가로줄에서 벽 부분을 1, 공백 부분을 0으로 부호화했을 때 얻어지는 이진수에 해당하는 값의 배열이다.

-----------------------------------------------------------------------------------------------------------------

def solution(n, arr1, arr2):
    exp = ''
    answer = []
    for i in range(n):
        arr1[i] = bin(arr1[i])
        arr2[i] = bin(arr2[i])
        arr1[i] = arr1[i].replace('b', '0' * (n - 1))
        arr2[i] = arr2[i].replace('b', '0' * (n - 1))
    for i in range(n):
        for j in range(-1, -n - 1, -1):
            if arr1[i][j] == '1' or arr2[i][j] == '1':
                exp += "#"
            else:
                exp += " "
        answer.append(''.join(reversed(exp)))
        exp = ""
        
    return answer


